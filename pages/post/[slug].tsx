import { GetStaticProps } from "next";
import React, { ReactNode, useState } from "react";
import PortableText from "react-portable-text";
import Footer from "../../components/Footer";
import Header from "../../components/Header";
import { sanityClient, urlFor } from "../../sanity";
import { Post } from "../../typings";
import { useForm, SubmitHandler } from "react-hook-form";
import Head from "next/head";

interface Props {
  post: Post;
}
interface IFormInput {
  _id: string;
  name: string;
  email: string;
  comment: string;
}

const Post = ({ post }: Props) => {
  const [sumbitted, setIsSumbitted] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IFormInput>();

  const onSumbit: SubmitHandler<IFormInput> = async (data) => {
    fetch("/api/createComment", {
      method: "POST",
      body: JSON.stringify(data),
    })
      .then(() => {
        setIsSumbitted(true);
      })
      .catch((err) => {
        setIsSumbitted(false);
      });
  };


  const commentHtml = () => {
    return (
      <div className="flex flex-col p-10 my-10 max-w-2xl w-full space-2">
        <h3 className="text-4xl">Comments</h3>
        <hr className="pb-2" />
        {post.comments.map((comment) => (
          <div key={comment._id}>
            <p className="">
              <span className="text-[#fec144]">{comment.name}: </span>
              {comment.comment}
            </p>
          </div>
        ))}
      </div>
    );
  };

  return (
    <main>
      <Head>
        <title>Flights Blog | {post.destinationCity}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <img
        className="w-full h-96 object-cover relative bg-cover bg-center"
        src={urlFor(post.mainImage).url()}
        alt="country flag"
      />
      <article className="max-w-5xl mx-auto p-5 text-center text-xl">
        <p>{post._createdAt.slice(0, 10).split("-").reverse().join("-")}</p>
        <h1 className="text-5xl mt-10 mb-3 font-bold">{post.title} {post.fullPrice}USD</h1>
      </article>
      <div className="flex max-w-7xl flex-col md:flex-row mx-auto justify-between items-center">
        <div className="flex flex-col items-center p-8 w-full text-center">
          <img src="../from.png" alt="From where photo" />
          <p className="pt-2">From</p>
          <p className="font-bold">{post.originCity}</p>
        </div>
        <div className="flex flex-col items-center p-8 w-full text-center">
          <img src="../from.png" alt="To where photo" />
          <p className="pt-2">To</p>
          <p className="font-bold">{post.destinationCity}</p>
        </div>
        <div className="flex flex-col items-center p-8 w-full text-center">
          <img src="../calendar.png" alt="Date img" />
          <p className="pt-2">When</p>
          <p className="font-bold">{post.dateWhen}</p>
        </div>
        <div className="flex flex-col items-center p-8 w-full text-center">
          <img src="../transfers.png" alt="Transfers img" />
          <p className="pt-2">Transfers</p>
          <p className="font-bold">{post.nmbOfTransfers}</p>
        </div>
        <div className="flex flex-col items-center p-8 w-full text-center">
          <img src="../time.png" alt="Date img" />
          <p className="pt-2">Travel Time</p>
          <p className="font-bold">{post.tourLenght}</p>
        </div>
        <div className="flex flex-col items-center p-8 w-full text-center">
          <img src="../money.png" alt="Date img" className="w-14" />
          <p>Price</p>
          <p className="font-bold">{post.fullPrice}</p>
        </div>
      </div>
      <div className="max-w-5xl mx-auto text-center flex flex-wrap justify-center pt-10 flex-col md:flex-row items-center font-bold">
        <a target={"_blank"} rel="noreferrer" href={post.ticketLink}>
          <button className="bg-[#fec144] rounded-full py-4 px-6 w-80 h-16 text-center mt-5 mr-5">
            <div className="relative">
              <img
                className="absolute left-0 top-2/4 -translate-y-2/4"
                src="../ticket.png"
              />
              <span className="font-bold">Buy Ticket</span>
            </div>
          </button>
        </a>
        <a target={"_blank"} rel="noreferrer" href={post.accomodationLink}>
          <button className="bg-black text-white rounded-full py-4 px-6 w-80 h-16 text-center mt-5 mr-5">
            <div className="relative">
              <img
                className="absolute left-0 top-2/4 -translate-y-2/4"
                src="../hotel.png"
              />
              <span className="font-bold">Accomodation</span>
            </div>
          </button>
        </a>
        <a target={"_blank"} rel="noreferrer" href={post.travelDatesLink}>
          <button className="bg-[#f7f7f7] text-black rounded-full py-4 px-6 w-80 h-16 text-center mt-5">
            <div className="relative">
              <img
                className="absolute left-0 top-2/4 -translate-y-2/4"
                src="../calendar.png"
              />
              <span className="font-bold">Other Dates</span>
            </div>
          </button>
        </a>
      </div>
      <article className="flex justify-center text-center">
        <PortableText
          className="pt-20 flex max-w-7xl flex-col items-center justify-center"
          dataset={process.env.NEXT_PUBLIC_SANITY_DATASET!}
          projectId={process.env.NEXT_PUBLIC_SANITY_PROJECT_ID!}
          content={post.body}
          serializers={{
            h1: (props: any) => (
              <h1 className="text-2xl font-bold my-5" {...props} />
            ),
            h4: (props: any) => (
              <h4 className="text-xl font-bold my-5" {...props} />
            ),
            p: (props: any) => (
              <p className="text-xl font-bold my-5" {...props} />
            ),
            li: ({ children }: any) => (
              <li className="list-disc ml-4 text-center p-1 last:mb-10">
                {children}
              </li>
            ),
            link: ({ href, children }: any) => (
              <a href={href} className="text-blue-500 hover:underline">
                {" "}
                {children}{" "}
              </a>
            ),
          }}
        />
      </article>

      <hr className="max-w-lg my-5 mx-auto border border-[#fec144]" />
      {sumbitted ? (
        <div className="flex w-full flex-col items-center md:items-start md:flex-row justify-evenly">
          <div className="flex flex-col py-10 my-10 bg-[#fec144] text-white max-w-2xl  items-center">
            <h3 className="text-3xl font-bold">
              Thank you for sumbitting your comment!
            </h3>
            <p>Once it has been approved, it will appear on the site!</p>
          </div>
          {commentHtml()}
        </div>
      ) : (
        <div className="flex w-full flex-col items-center md:items-start md:flex-row justify-evenly">
          <form
            onSubmit={handleSubmit(onSumbit)}
            className="flex flex-col p-5 max-w-2xl w-full mb-10"
          >
            <h3 className="text-lg text-[#fec144]">Enjoyed the offer?</h3>
            <h4 className="text-3xl font-bold">Leave a comment below!</h4>

            <input
              {...register("_id")}
              type="hidden"
              name="_id"
              value={post._id}
            />

            <label className="block mb-5">
              <span className="text-gray-700 ">Name</span>
              <input
                {...register("name", { required: true })}
                className="shadow border rounded py-2 px-3 form-input mt-1 block w-full ring-[#fec144] focus:ring outline-none"
                placeholder="Type your name.."
                type="text"
              />
            </label>
            <label className="block mb-5">
              <span className="text-gray-700 ">Email</span>
              <input
                {...register("email", { required: true })}
                className="shadow border rounded py-2 px-3 form-input mt-1 block w-full ring-[#fec144] focus:ring outline-none"
                placeholder="Type your email.."
                type="text"
              />
            </label>
            <label className="block mb-5">
              <span className="text-gray-700 ">Comment</span>
              <textarea
                {...register("comment", { required: true })}
                className="shadow border rounded py-2 px-3 form-textarea mt-1 block w-full ring-[#fec144] focus:ring outline-none"
                placeholder="Type your comment.."
                rows={8}
              />
            </label>

            <div className="flex flex-col p-5">
              {errors.name && (
                <span className="text-red-500">
                  The Name Field is required!
                </span>
              )}
              {errors.email && (
                <span className="text-red-500">
                  The Email Field is required!
                </span>
              )}
              {errors.comment && (
                <span className="text-red-500">
                  The Comment Field is required!
                </span>
              )}
            </div>
            <input
              type={"submit"}
              className="shadow bg-[#fec144] hover:bg-yellow-200 focus:shadow-outline focus:outline-none text-white px-4 rounded cursor-pointer py-2 font-bold"
            />
          </form>
          {commentHtml()}
        </div>
      )}

      <div className="max-w-6xl  border-t-2 border-[#fec144] mx-auto text-center mt-9 flex flex-col md:flex-row justify-between items-center">
        <div className="mt-3 flex p-3 items-center">
          <img
            src={urlFor(post.author.image).url()}
            className="h-10 w-10 rounded-full"
            alt="author img"
          />
          <p className="ml-2">Posted by {post.author.name}</p>
        </div>
      </div>
      <Footer />
    </main>
  );
};

export default Post;

export const getStaticPaths = async () => {
  const query = `*[_type == "post"] {
  _id,
  slug {
   current
  }
}`;

  const posts = await sanityClient.fetch(query);

  const paths = posts.map((post: Post) => ({
    params: {
      slug: post.slug.current,
    },
  }));

  return {
    paths,
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const query = `*[_type == "post" && slug.current == $slug] [0]{
  _id,
  _createdAt,
  title,
  originCity,
  destinationCity,
  fullPrice,
  dateWhen,
  tourLenght,
  nmbOfTransfers,
  ticketLink,
  accomodationLink,
  travelDatesLink,
  categories[0] -> {
  title,
},
'comments': *[
 _type == "comment" &&
 post._ref == ^._id &&
 approved == true],
mainImage,
  author -> {
  name,
  image
},
slug,
body
}`;

  const post = await sanityClient.fetch(query, {
    slug: params?.slug,
  });

  if (!post) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      post,
    },
    revalidate: 60,
  };
};
