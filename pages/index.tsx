import Head from "next/head";
import Header from "../components/Header";
import { sanityClient, urlFor } from "../sanity";
import { Post } from "../typings";
import Link from "next/link";
import Footer from "../components/Footer";
import { useEffect, useState } from "react";
import Pagination from "../components/Pagination";
import axios from "axios";

interface Props {
  posts: [Post];
}

const Home = ({ posts }: Props) => {
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [postsPerPage, setPostsPerPage] = useState<number>(9);
  const [currency, setCurrency] = useState<any[]>([]);
  const [currentCurr, setCurrentCurr] = useState<number>(0);
  const [currentCurrName, setCurrentCurrName] = useState("");
  const [sortCurr, setSortCurr] = useState("");

  const indexOfLastPost = currentPage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);

  const paginate = (pageNumber: number) => {
    setCurrentPage(pageNumber);
  };
  useEffect(() => {
    const currencyRequest = async () => {
      const getCurr = await axios.get(
        "https://api.currencyapi.com/v3/latest?apikey=xHykqZcG5R2sZNin76xpuCoJVIstzx8tS1JXR1c8"
      );
      const { CAD, GBP, CNY, EUR, NOK, AUD } = getCurr.data.data;

      let userTestStatus: { name: string; value: number }[] = [
        { name: "CAD", value: CAD.value },
        { name: "CNY", value: CNY.value },
        { name: "GBP", value: GBP.value },
        { name: "EUR", value: EUR.value },
        { name: "NOK", value: NOK.value },
        { name: "AUD", value: AUD.value },
        { name: "USD", value: 1 },
      ];

      setCurrency(userTestStatus);
    };
    currencyRequest();
  }, []);

  useEffect(() => {
    const currencyCalc = (type: any) => {
      const types = {
        USD: "USD",
        EUR: "EUR",
        GBP: "GBP",
        CAD: "CAD",
        CNY: "CNY",
        NOK: "NOK",
        AUD: "AUD",
      };
      const sortProperty = types[type];

      const findCurrencyName = currency.find((el) => el.name === sortProperty);
      setCurrentCurr(findCurrencyName?.value);
      setCurrentCurrName(findCurrencyName?.name);
    };

    currencyCalc(sortCurr);
  }, [sortCurr]);

  return (
    <>
      <div className="max-w-7xl mx-auto">
        <Head>
          <title>Flights Blog | Home</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header />

        <div className="bg-[#fec144] flex justify-center md:justify-between items-center border-y border-[#fec144] py-16 ">
          <div className="md:px-10 space-y-5">
            <h1 className="text-center md:text-left text-6xl max-w-xl font-serif">
              The best place to find cheap flight deals from Poland and Europe!
            </h1>
          </div>

          <img
            className="hidden md:inline-flex h-44 mx-5"
            src="./plane-icon.jpg"
            alt="plane icon"
          />
        </div>
        <div className="sm:flex-row flex-column justify-between text-center items-center py-5 max-w-7xl mx-auto">
          <h3 className="font-bold text-2xl">
            The best offers in whole internet!
          </h3>
          <select onChange={(e) => setSortCurr(e.target.value)}>
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
            <option value="GBP">GBP</option>
            <option value="CAD">CAD</option>
            <option value="AUD">AUD</option>
            <option value="NOK">NOK</option>
            <option value="CNY">CNY</option>
          </select>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-6 p-2 md:p-6">
          {currentPosts.map((post) => (
            <Link href={`/post/${post.slug.current}`} key={post._id}>
              <div className="overflow-hidden">
                <div className="relative group cursor-pointer">
                  <img
                    className="w-full object-cover h-56 group-hover:scale-105 transition-transform duration-200 ease-in-out object-fill"
                    src={urlFor(post.mainImage).url()!}
                    alt="flag"
                  />
                  <p className="absolute right-3 bottom-2 bg-[#fec144] rounded-full px-2">
                    from: {post.originCity}
                  </p>
                  <p className="absolute left-3 bottom-2 bg-[#f7f7f7] rounded-full px-2">
                    {post._createdAt
                      .slice(0, 10)
                      .split("-")
                      .reverse()
                      .join("-")}
                  </p>
                </div>
                <div>
                  <p className="text-center py-2 text-xl">
                    {post.title}
                    <span>
                      {" "}
                      {currentCurr
                        ? (post.fullPrice * currentCurr).toFixed(1)
                        : post.fullPrice}
                      {currentCurr ? currentCurrName : "USD"}!
                    </span>
                  </p>
                </div>
              </div>
            </Link>
          ))}
        </div>
        <Pagination
          paginate={paginate}
          postsPerPage={postsPerPage}
          totalPosts={posts.length}
          currentPage={currentPage}
        />
      </div>
      <Footer />
    </>
  );
};

export default Home;

export const getServerSideProps = async () => {
  const query = `*[_type == "post"] | order(_createdAt desc) {
  _id,
  title,
  _createdAt,
  originCity,
  destinationCity,
  fullPrice,
  tourLenght,
  nmbOfTransfers,
  ticketLink,
  accomodationLink,
  travelDatesLink,
  categories[0] -> {
  title,
},
mainImage,
  author -> {
  name,
  image
},
slug,
}`;

  const posts = await sanityClient.fetch(query);
  return {
    props: { posts },
  };
};
